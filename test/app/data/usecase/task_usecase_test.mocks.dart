// Mocks generated by Mockito 5.4.4 from annotations
// in to_do_list/test/app/data/usecase/task_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:to_do_list/core/local_db/entity/db_task_entity.dart' as _i4;
import 'package:to_do_list/core/local_db/repository/database_task_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DatabaseTaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseTaskRepository extends _i1.Mock
    implements _i2.DatabaseTaskRepository {
  MockDatabaseTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> insertTask(_i4.DbTaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #insertTask,
          [task],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<int>> insertTasks(List<_i4.DbTaskEntity>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTasks,
          [tasks],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<void> deleteTask(_i4.DbTaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTasksFromIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteTasksFromIndex,
          [index],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTask(_i4.DbTaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.DbTaskEntity>> findAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #findAllTasks,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.DbTaskEntity>>.value(<_i4.DbTaskEntity>[]),
      ) as _i3.Future<List<_i4.DbTaskEntity>>);

  @override
  _i3.Future<List<_i4.DbTaskEntity>> findPendingTasks() => (super.noSuchMethod(
        Invocation.method(
          #findPendingTasks,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.DbTaskEntity>>.value(<_i4.DbTaskEntity>[]),
      ) as _i3.Future<List<_i4.DbTaskEntity>>);

  @override
  _i3.Future<List<_i4.DbTaskEntity>> findOngoingTasks() => (super.noSuchMethod(
        Invocation.method(
          #findOngoingTasks,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.DbTaskEntity>>.value(<_i4.DbTaskEntity>[]),
      ) as _i3.Future<List<_i4.DbTaskEntity>>);

  @override
  _i3.Future<List<_i4.DbTaskEntity>> findCompletedTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #findCompletedTasks,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.DbTaskEntity>>.value(<_i4.DbTaskEntity>[]),
      ) as _i3.Future<List<_i4.DbTaskEntity>>);

  @override
  _i3.Future<_i4.DbTaskEntity?> findTaskById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findTaskById,
          [id],
        ),
        returnValue: _i3.Future<_i4.DbTaskEntity?>.value(),
      ) as _i3.Future<_i4.DbTaskEntity?>);

  @override
  _i3.Future<void> updateTaskToPending(int? id) => (super.noSuchMethod(
        Invocation.method(
          #updateTaskToPending,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTaskToOngoing(int? id) => (super.noSuchMethod(
        Invocation.method(
          #updateTaskToOngoing,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTaskToCompleted(int? id) => (super.noSuchMethod(
        Invocation.method(
          #updateTaskToCompleted,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
